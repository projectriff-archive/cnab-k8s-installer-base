# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.11' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code
  fatsDir: '$(system.defaultWorkingDirectory)/fats'
  fatsRefspec: 5f535a2689e203937c79ab87828c2af585159aca # projectriff/fats master as of 2019-07-22
  cnabRiffDir: '$(system.defaultWorkingDirectory)/cnab-riff'
  cnabRiffRefspec: 9bc33ad76c7382564ba96372619e2589a369853b # projectriff/cnab-riff master as of 2019-05-23
  installationName: myinstall

pool:
  vmImage: 'ubuntu-16.04'

name: $(Date:yyyyMMdd)$(Rev:.r)
steps:
  - template: ci/go-build-step.yml
  - script: go get golang.org/x/tools/cmd/goimports
    displayName: 'get goimports'
  - script: make
    workingDirectory: '$(modulePath)'
    displayName: 'build and unit test'

  - bash: bash <(curl -s https://codecov.io/bash)
    workingDirectory: '$(modulePath)'
    displayName: 'publish code coverage'

  - template: ci/fetch-fats-step.yml
  - template: ci/start-minikube-steps.yml
  - template: ci/install-kubectl-steps.yml

  - template: ci/fetch-cnab-riff-step.yml

  - script: |
      ./cnab/app/run
    workingDirectory: '$(modulePath)'
    displayName: 'install'
    env:
      CNAB_ACTION: install
      CNAB_INSTALLATION_NAME: '$(installationName)'
      MANIFEST_FILE: $(cnabRiffDir)/cnab/app/kab/manifest.yaml
      LOG_LEVEL: debug
  - script: kubectl get namespaces | grep -E "knative-serving|istio-system|riff-system"
    displayName: 'verify install'

  - script: |
      ./cnab/app/run
    workingDirectory: '$(modulePath)'
    displayName: 'uninstall'
    env:
      CNAB_ACTION: uninstall
      CNAB_INSTALLATION_NAME: '$(installationName)'
      MANIFEST_FILE: $(cnabRiffDir)/cnab/app/kab/manifest.yaml
      LOG_LEVEL: debug
  - script: kubectl get namespaces | ( ! grep -E "knative-serving|istio-system|riff-system" )
    displayName: 'verify uninstall'

  - bash: ci/diagnostics.sh
    condition: failed()
    workingDirectory: '$(modulePath)'
    displayName: 'diagnostics'

  - task: Docker@1
    displayName: 'Docker-hub registry login'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      command: login
      containerregistrytype: Container Registry
      dockerRegistryEndpoint: dockerhub

  - task: Docker@1
    displayName: 'Build image'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      command: build
      dockerFile: $(modulePath)/cnab/Dockerfile
      imageName: $(Build.Repository.Name):$(Build.BuildNumber)
      includeLatestTag: true
      containerregistrytype: Container Registry
      dockerRegistryEndpoint: dockerhub

  - task: Docker@1
    displayName: 'Push image'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      command: push
      imageName: $(Build.Repository.Name):$(Build.BuildNumber)
      containerregistrytype: Container Registry
      dockerRegistryEndpoint: dockerhub

  - task: Docker@1
    displayName: 'tag edge image'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      command: tag
      imageName: $(Build.Repository.Name):$(Build.BuildNumber)
      arguments: $(Build.Repository.Name):edge

  - task: Docker@1
    displayName: 'Push edge tag'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      command: push
      imageName: $(Build.Repository.Name):edge
      containerregistrytype: Container Registry
      dockerRegistryEndpoint: dockerhub

  - script: |
      echo "##vso[task.setvariable variable=version]`cat VERSION`"
    displayName: 'set version variable for tagging images'
    condition: |
      and(
      startsWith(variables['Build.SourceBranch'], 'refs/heads/v'),
      endsWith(variables['Build.SourceBranch'], 'x')
      )

  - task: Docker@1
    displayName: 'tag versioned image'
    condition: |
      and(
        startsWith(variables['Build.SourceBranch'], 'refs/heads/v'),
        endsWith(variables['Build.SourceBranch'], 'x')
      )
    inputs:
      command: tag
      imageName: $(Build.Repository.Name):$(Build.BuildNumber)
      arguments: $(Build.Repository.Name):$(version)

  - task: Docker@1
    displayName: 'Push versioned tag'
    condition: |
      and(
        startsWith(variables['Build.SourceBranch'], 'refs/heads/v'),
        endsWith(variables['Build.SourceBranch'], 'x')
      )
    inputs:
      command: push
      imageName: $(Build.Repository.Name):$(version)
      containerregistrytype: Container Registry
      dockerRegistryEndpoint: dockerhub
